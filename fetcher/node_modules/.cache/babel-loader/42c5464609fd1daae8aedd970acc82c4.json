{"ast":null,"code":"import { PossessionTeam, BallPlace, Punt, EndMakeDrive, GetPoints, KickOff, InterceptionFunc, Offense } from './EntryPoint';\n\nconst Allprocessor = _ref => {\n  let {\n    data,\n    ballPlace,\n    ballPossession,\n    ballOn,\n    down,\n    distance,\n    setBallPlace,\n    setBallPossession,\n    setBallOn,\n    setId,\n    setDown,\n    setDistance,\n    setHomePoints,\n    setAwayPoints\n  } = _ref;\n  var state = {\n    BallPlaceResult: ballPlace\n  };\n  console.log(state.BallPlaceResult, \"FIrst\"); // BallOnのヤードに関して、Offenceでgainした時の処理\n\n  if (data.o_or_k === \"Offense\") {\n    Offense({\n      data,\n      ballPlace,\n      state,\n      ballPossession,\n      setBallOn,\n      ballOn,\n      setBallPlace,\n      down,\n      distance,\n      setBallPossession,\n      setId,\n      setDown,\n      setDistance\n    }); //BallPosition({data,ballPlace,state,ballPossession,setBallOn,ballOn,setBallPlace})\n  } // Puntの時の処理\n\n\n  if (data.o_or_k === \"Punt\") {\n    EndMakeDrive({\n      data,\n      ballPossession,\n      setBallPossession,\n      setId,\n      setDown,\n      setDistance\n    });\n    Punt({\n      data,\n      ballOn,\n      setBallOn,\n      ballPlace,\n      setBallPlace,\n      state,\n      ballPossession\n    });\n  } // FGの処理// TDの処理\n\n\n  if (data.kick_isgood === \"Good\" || ballOn < 0) {\n    GetPoints({\n      data,\n      ballPossession,\n      setHomePoints,\n      setAwayPoints,\n      ballOn,\n      setBallOn\n    });\n    EndMakeDrive({\n      data,\n      ballPossession,\n      setBallPossession,\n      setId,\n      setDown,\n      setDistance\n    });\n    setBallPlace(!ballPlace);\n  } else if (data.o_or_k === \"FG\" && data.kick_isgood === \"No Good\") {\n    EndMakeDrive({\n      data,\n      ballPossession,\n      setBallPossession,\n      setId,\n      setDown,\n      setDistance\n    });\n  } // Kick Off処理\n\n\n  if (data.o_or_k === \"Kick Off\") {\n    KickOff({\n      data,\n      ballOn,\n      ballPossession,\n      setBallOn,\n      setBallPossession,\n      ballPlace,\n      setBallPlace,\n      state\n    }); // setBallPossession(!ballPossession)\n  } // INTの処理//Fumbleの処理　=> TurnOver,BallPlace,interceptされた場所、FumbelRecoverされた場所,return_yards\n  // INT=> Pass=>INT=>INT_PLACE=>RETURN_YARDS=>TURNOVER(BALLPOSSESSIONの変化)\n\n\n  if (data.pass_iscomplete === \"Interception\" || data.result === \"Fumble\") {\n    setBallPossession(!ballPossession);\n    InterceptionFunc({\n      data,\n      ballPlace,\n      ballPossession,\n      setBallPlace,\n      setBallPossession,\n      setBallOn,\n      state\n    });\n    EndMakeDrive({\n      data,\n      ballPossession,\n      setBallPossession,\n      setId,\n      setDown,\n      setDistance\n    });\n  } // D&Dの処理,シンプルにできる\n  // if (data.o_or_k == \"Offense\"){\n  //     if(down === 4 && distance > data.yards_gained){\n  //         EndMakeDrive({data,ballPossession,setBallPossession,setId,setDown,setDistance})\n  //         setBallPossession(!ballPossession)\n  //         console.log(\"Gamble failed\")\n  //     }else{\n  //         DownDistance({data,distance,setDown,down,setDistance})\n  //     }\n  // }\n  // ボール保持チームが変わった時の処理\n\n\n  PossessionTeam(data, ballPossession); // Ballがどちらの陣地にあるかに関する処理\n\n  console.log(state, \"middle\");\n  BallPlace(data, ballPlace, state.BallPlaceResult);\n  return null;\n};\n\n_c = Allprocessor;\nexport default Allprocessor;\n\nvar _c;\n\n$RefreshReg$(_c, \"Allprocessor\");","map":{"version":3,"names":["PossessionTeam","BallPlace","Punt","EndMakeDrive","GetPoints","KickOff","InterceptionFunc","Offense","Allprocessor","data","ballPlace","ballPossession","ballOn","down","distance","setBallPlace","setBallPossession","setBallOn","setId","setDown","setDistance","setHomePoints","setAwayPoints","state","BallPlaceResult","console","log","o_or_k","kick_isgood","pass_iscomplete","result"],"sources":["/Users/toimotoriku/Desktop/gamecast/form1.1/src/form/functions/AllProcessor.ts"],"sourcesContent":["import React from 'react'\nimport { Play } from '../Alies'\nimport { BallPosition,PossessionTeam,BallPlace, Punt,EndMakeDrive, GetPoints,Initializer,KickOff, DownDistance,InterceptionFunc,Offense } from './EntryPoint'\n\n\ntype Props = {\n    data:Play\n    ballPlace:boolean\n    ballPossession:boolean\n    ballOn:number\n    down:number\n    distance:number\n    setBallPlace:React.Dispatch<React.SetStateAction<boolean>>\n    setBallPossession:React.Dispatch<React.SetStateAction<boolean>>\n    setBallOn:React.Dispatch<React.SetStateAction<number>>\n    setId:React.Dispatch<React.SetStateAction<number>>\n    setDown:React.Dispatch<React.SetStateAction<number>>\n    setDistance:React.Dispatch<React.SetStateAction<number>>\n    setHomePoints:React.Dispatch<React.SetStateAction<number>>\n    setAwayPoints:React.Dispatch<React.SetStateAction<number>>\n}\n\nconst Allprocessor:React.FC<Props> = ({data,ballPlace,ballPossession,ballOn,down,distance,setBallPlace,setBallPossession,setBallOn,setId,setDown,setDistance,setHomePoints,setAwayPoints}) => {\n\n    var state = {\n        BallPlaceResult:ballPlace\n    }\n    console.log(state.BallPlaceResult,\"FIrst\")\n\n    // BallOnのヤードに関して、Offenceでgainした時の処理\n    if (data.o_or_k === \"Offense\"){\n        Offense({data,ballPlace,state,ballPossession,setBallOn,ballOn,setBallPlace,down,distance,setBallPossession,setId,setDown,setDistance})\n        //BallPosition({data,ballPlace,state,ballPossession,setBallOn,ballOn,setBallPlace})\n    }\n    \n\n    // Puntの時の処理\n    if (data.o_or_k === \"Punt\"){\n        EndMakeDrive({data,ballPossession,setBallPossession,setId,setDown,setDistance})\n        Punt({data,ballOn,setBallOn,ballPlace,setBallPlace,state,ballPossession})\n    }\n    // FGの処理// TDの処理\n    if (data.kick_isgood === \"Good\" || ballOn<0){\n        GetPoints({data,ballPossession,setHomePoints,setAwayPoints,ballOn,setBallOn})\n        EndMakeDrive({data,ballPossession,setBallPossession,setId,setDown,setDistance})\n        setBallPlace(!ballPlace)\n    }else if(data.o_or_k===\"FG\" && data.kick_isgood===\"No Good\"){\n        EndMakeDrive({data,ballPossession,setBallPossession,setId,setDown,setDistance})\n    }\n    // Kick Off処理\n    if (data.o_or_k ===\"Kick Off\"){\n        KickOff({data,ballOn,ballPossession,setBallOn,setBallPossession,ballPlace,setBallPlace,state})\n        // setBallPossession(!ballPossession)\n    }\n\n    // INTの処理//Fumbleの処理　=> TurnOver,BallPlace,interceptされた場所、FumbelRecoverされた場所,return_yards\n    // INT=> Pass=>INT=>INT_PLACE=>RETURN_YARDS=>TURNOVER(BALLPOSSESSIONの変化)\n    if (data.pass_iscomplete===\"Interception\" || data.result === \"Fumble\"){\n        setBallPossession(!ballPossession)\n        InterceptionFunc({data,ballPlace,ballPossession,setBallPlace,setBallPossession,setBallOn,state});\n        EndMakeDrive({data,ballPossession,setBallPossession,setId,setDown,setDistance})\n    }\n\n\n\n\n    // D&Dの処理,シンプルにできる\n    // if (data.o_or_k == \"Offense\"){\n    //     if(down === 4 && distance > data.yards_gained){\n    //         EndMakeDrive({data,ballPossession,setBallPossession,setId,setDown,setDistance})\n    //         setBallPossession(!ballPossession)\n    //         console.log(\"Gamble failed\")\n    //     }else{\n    //         DownDistance({data,distance,setDown,down,setDistance})\n    //     }\n    // }\n    // ボール保持チームが変わった時の処理\n    PossessionTeam(data,ballPossession);\n    // Ballがどちらの陣地にあるかに関する処理\n    console.log(state,\"middle\")\n    BallPlace(data,ballPlace,state.BallPlaceResult)\n    \n  return null\n}\n\nexport default Allprocessor\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}