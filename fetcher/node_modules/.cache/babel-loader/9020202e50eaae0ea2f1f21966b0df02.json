{"ast":null,"code":"const Interception = _ref => {\n  let {\n    data,\n    ballPlace,\n    ballPossession,\n    setBallPlace,\n    setBallPossession,\n    setBallOn\n  } = _ref;\n  console.log(ballPossession, ballPlace, 0); // setBallPossession(!ballPossession)  //なんでこれだけできないのか\n  // setBallPlace(data.turnover_place)\n  // set関数は次レンダリング？されるまでは更新されない、から、その場での即時的な値の変化には不向きである。その場合は、変数を使ってしまう方がよい。\n\n  if (ballPossession == true) {\n    ballPossession = false;\n  } else {\n    ballPossession = true;\n  }\n\n  ballPlace = data.turnover_place;\n  console.log(ballPossession, ballPlace, 1);\n  setBallOn(data.turnover_yards);\n\n  if (ballPlace && ballPossession) {\n    if (data.turnover_yards + data.to_return_yards <= 50) {\n      setBallOn(prevBallOn => prevBallOn + data.to_return_yards);\n    } else {\n      setBallOn(prevBallOn => 100 - prevBallOn - data.to_return_yards);\n      setBallPlace(!ballPlace);\n    }\n\n    console.log(\"c\");\n  } else if (!ballPlace && ballPossession) {\n    setBallOn(prevBallOn => prevBallOn - data.to_return_yards);\n    console.log(\"d\");\n  }\n\n  console.log(ballPossession, ballPlace, 2);\n\n  if (!ballPlace && !ballPossession) {\n    if (data.turnover_yards + data.to_return_yards <= 50) {\n      setBallOn(prevBallOn => prevBallOn + data.to_return_yards);\n      console.log(\"a\");\n    } else {\n      setBallOn(prevBallOn => 100 - prevBallOn - data.to_return_yards);\n      setBallPlace(!ballPlace);\n    }\n  } else if (ballPlace && !ballPossession) {\n    setBallOn(prevBallOn => prevBallOn - data.to_return_yards);\n    console.log(\"b\");\n  }\n\n  console.log(ballPossession, ballPlace);\n  return null;\n};\n\n_c = Interception;\nexport default Interception;\n\nvar _c;\n\n$RefreshReg$(_c, \"Interception\");","map":{"version":3,"names":["Interception","data","ballPlace","ballPossession","setBallPlace","setBallPossession","setBallOn","console","log","turnover_place","turnover_yards","to_return_yards","prevBallOn"],"sources":["/Users/toimotoriku/Desktop/gamecast/form1.1/src/form/functions/Interception.ts"],"sourcesContent":["import React from 'react'\nimport { Play } from '../Alies'\n\ntype Props = {\n    data:Play\n    ballPlace:boolean\n    ballPossession:boolean\n    setBallPlace:React.Dispatch<React.SetStateAction<boolean>>\n    setBallPossession:React.Dispatch<React.SetStateAction<boolean>>\n    setBallOn:React.Dispatch<React.SetStateAction<number>>\n}\n\nconst Interception:React.FC<Props> = ({data,ballPlace,ballPossession,setBallPlace,setBallPossession,setBallOn}) => {\n    console.log(ballPossession,ballPlace,0)\n    // setBallPossession(!ballPossession)  //なんでこれだけできないのか\n    // setBallPlace(data.turnover_place)\n    // set関数は次レンダリング？されるまでは更新されない、から、その場での即時的な値の変化には不向きである。その場合は、変数を使ってしまう方がよい。\n    if (ballPossession == true){ballPossession=false}\n    else{ballPossession=true}\n    ballPlace = data.turnover_place\n    console.log(ballPossession,ballPlace,1)\n    setBallOn(data.turnover_yards)\n\n    if (ballPlace &&  ballPossession){\n        if (data.turnover_yards + data.to_return_yards <= 50){\n            setBallOn(prevBallOn => prevBallOn + data.to_return_yards)\n        }else{\n            setBallOn(prevBallOn => 100 - prevBallOn -   data.to_return_yards)\n            setBallPlace(!ballPlace)\n        }\n        console.log(\"c\")\n    }\n    else if ((!ballPlace) && ballPossession){\n        setBallOn(prevBallOn => prevBallOn - data.to_return_yards)\n        console.log(\"d\")\n\n    }\n    console.log(ballPossession,ballPlace,2)\n\n    if ((!ballPlace) && (!ballPossession)){\n        if (data.turnover_yards + data.to_return_yards <= 50){\n            setBallOn(prevBallOn => prevBallOn + data.to_return_yards)\n            console.log(\"a\")\n        }else{\n            setBallOn(prevBallOn => 100 - prevBallOn -data.to_return_yards)\n            setBallPlace(!ballPlace)\n        }\n    }\n    else if (ballPlace && (!ballPossession)){\n        setBallOn(prevBallOn => prevBallOn - data.to_return_yards)\n        console.log(\"b\")\n    }\n    console.log(ballPossession,ballPlace)\n\n\n  return null\n}\n\nexport default Interception\n"],"mappings":"AAYA,MAAMA,YAA4B,GAAG,QAA8E;EAAA,IAA7E;IAACC,IAAD;IAAMC,SAAN;IAAgBC,cAAhB;IAA+BC,YAA/B;IAA4CC,iBAA5C;IAA8DC;EAA9D,CAA6E;EAC/GC,OAAO,CAACC,GAAR,CAAYL,cAAZ,EAA2BD,SAA3B,EAAqC,CAArC,EAD+G,CAE/G;EACA;EACA;;EACA,IAAIC,cAAc,IAAI,IAAtB,EAA2B;IAACA,cAAc,GAAC,KAAf;EAAqB,CAAjD,MACI;IAACA,cAAc,GAAC,IAAf;EAAoB;;EACzBD,SAAS,GAAGD,IAAI,CAACQ,cAAjB;EACAF,OAAO,CAACC,GAAR,CAAYL,cAAZ,EAA2BD,SAA3B,EAAqC,CAArC;EACAI,SAAS,CAACL,IAAI,CAACS,cAAN,CAAT;;EAEA,IAAIR,SAAS,IAAKC,cAAlB,EAAiC;IAC7B,IAAIF,IAAI,CAACS,cAAL,GAAsBT,IAAI,CAACU,eAA3B,IAA8C,EAAlD,EAAqD;MACjDL,SAAS,CAACM,UAAU,IAAIA,UAAU,GAAGX,IAAI,CAACU,eAAjC,CAAT;IACH,CAFD,MAEK;MACDL,SAAS,CAACM,UAAU,IAAI,MAAMA,UAAN,GAAqBX,IAAI,CAACU,eAAzC,CAAT;MACAP,YAAY,CAAC,CAACF,SAAF,CAAZ;IACH;;IACDK,OAAO,CAACC,GAAR,CAAY,GAAZ;EACH,CARD,MASK,IAAK,CAACN,SAAF,IAAgBC,cAApB,EAAmC;IACpCG,SAAS,CAACM,UAAU,IAAIA,UAAU,GAAGX,IAAI,CAACU,eAAjC,CAAT;IACAJ,OAAO,CAACC,GAAR,CAAY,GAAZ;EAEH;;EACDD,OAAO,CAACC,GAAR,CAAYL,cAAZ,EAA2BD,SAA3B,EAAqC,CAArC;;EAEA,IAAK,CAACA,SAAF,IAAiB,CAACC,cAAtB,EAAsC;IAClC,IAAIF,IAAI,CAACS,cAAL,GAAsBT,IAAI,CAACU,eAA3B,IAA8C,EAAlD,EAAqD;MACjDL,SAAS,CAACM,UAAU,IAAIA,UAAU,GAAGX,IAAI,CAACU,eAAjC,CAAT;MACAJ,OAAO,CAACC,GAAR,CAAY,GAAZ;IACH,CAHD,MAGK;MACDF,SAAS,CAACM,UAAU,IAAI,MAAMA,UAAN,GAAkBX,IAAI,CAACU,eAAtC,CAAT;MACAP,YAAY,CAAC,CAACF,SAAF,CAAZ;IACH;EACJ,CARD,MASK,IAAIA,SAAS,IAAK,CAACC,cAAnB,EAAmC;IACpCG,SAAS,CAACM,UAAU,IAAIA,UAAU,GAAGX,IAAI,CAACU,eAAjC,CAAT;IACAJ,OAAO,CAACC,GAAR,CAAY,GAAZ;EACH;;EACDD,OAAO,CAACC,GAAR,CAAYL,cAAZ,EAA2BD,SAA3B;EAGF,OAAO,IAAP;AACD,CA5CD;;KAAMF,Y;AA8CN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}